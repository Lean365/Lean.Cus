using System.Linq.Expressions;using Mapster;using SqlSugar;using Lean.Cus.Application.Dtos.Admin;using Lean.Cus.Application.Interfaces.Admin;using Lean.Cus.Common.Excel;using Lean.Cus.Common.Exceptions;using Lean.Cus.Common.Extensions;using Lean.Cus.Common.Paging;using Lean.Cus.Domain.Entities.Admin;using Lean.Cus.Domain.IRepositories;namespace Lean.Cus.Application.Services.Admin;public class LeanMenuService : ILeanMenuService{private readonly ILeanRepository<LeanMenu> _menuRepository;private readonly ILeanExcelHelper _excelHelper;public LeanMenuService(ILeanRepository<LeanMenu> menuRepository, ILeanExcelHelper excelHelper){_menuRepository = menuRepository;_excelHelper = excelHelper;}}
public async Task<List<LeanMenuDto>> GetListAsync(LeanMenuQueryDto query){var list = await _menuRepository.GetListAsync(m =>(string.IsNullOrEmpty(query.MenuName) || m.MenuName.Contains(query.MenuName)) &&(string.IsNullOrEmpty(query.MenuCode) || m.MenuCode.Contains(query.MenuCode)) &&(!query.MenuType.HasValue || m.MenuType == query.MenuType.Value) &&(string.IsNullOrEmpty(query.PermissionCode) || m.PermissionCode == query.PermissionCode) &&(!query.Status.HasValue || m.Status == query.Status.Value),orderBy: m => m.OrderNum);return list.Adapt<List<LeanMenuDto>>();}
