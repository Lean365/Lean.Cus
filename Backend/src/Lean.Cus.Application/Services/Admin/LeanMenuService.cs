//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件的所有修改。
// </auto-generated>
//
// <copyright file="LeanMenuService.cs" company="Lean365">
//     Copyright (c) Lean365. All rights reserved.
// </copyright>
// <author>Lean365</author>
// <date>2024-01-08</date>
// <summary>
// 菜单服务实现
// </summary>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Lean.Cus.Application.IServices.Admin;
using Lean.Cus.Application.Dtos.Admin;
using Lean.Cus.Domain.Entities.Admin;
using Lean.Cus.Domain.Repositories;
using Microsoft.Extensions.Logging;
using SqlSugar;
using Lean.Cus.Common.Enums;
using Lean.Cus.Common.Services;
using Lean.Cus.Common.Repositories;

namespace Lean.Cus.Application.Services.Admin;

/// <summary>
/// 菜单服务实现
/// </summary>
public class LeanMenuService : LeanService<LeanMenu, LeanMenuDto, LeanMenuQueryDto, LeanMenuCreateDto, LeanMenuUpdateDto>, ILeanMenuService
{
    private readonly ILeanRepository<LeanRoleMenu> _roleMenuRepository;
    private readonly ILeanRepository<LeanUserRole> _userRoleRepository;

    /// <summary>
    /// 构造函数
    /// </summary>
    /// <param name="repository">菜单仓储</param>
    /// <param name="roleMenuRepository">角色菜单关联仓储</param>
    /// <param name="userRoleRepository">用户角色关联仓储</param>
    /// <param name="logger">日志记录器</param>
    public LeanMenuService(
        ILeanRepository<LeanMenu> repository,
        ILeanRepository<LeanRoleMenu> roleMenuRepository,
        ILeanRepository<LeanUserRole> userRoleRepository,
        ILogger<LeanMenuService> logger)
        : base(repository, logger)
    {
        _roleMenuRepository = roleMenuRepository;
        _userRoleRepository = userRoleRepository;
    }

    /// <inheritdoc/>
    public async Task<List<LeanMenuDto>> GetTreeAsync()
    {
        try
        {
            var menus = await Repository.AsQueryable()
                .OrderBy(m => m.Sort)
                .ToListAsync();

            return BuildTree(menus.Select(MapToDto).ToList());
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "获取菜单树异常");
            throw;
        }
    }

    /// <inheritdoc/>
    public async Task<List<LeanMenuDto>> GetRoleMenuTreeAsync(long roleId)
    {
        try
        {
            var roleMenus = await _roleMenuRepository.AsQueryable()
                .Where(rm => rm.RoleId == roleId)
                .ToListAsync();

            var menuIds = roleMenus.Select(rm => rm.MenuId).ToList();

            var menus = await Repository.AsQueryable()
                .Where(m => menuIds.Contains(m.Id))
                .OrderBy(m => m.Sort)
                .ToListAsync();

            return BuildTree(menus.Select(MapToDto).ToList());
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "获取角色菜单树异常");
            throw;
        }
    }

    /// <inheritdoc/>
    public async Task<List<LeanMenuDto>> GetUserMenuTreeAsync(long userId)
    {
        try
        {
            var userRoles = await _userRoleRepository.AsQueryable()
                .Where(ur => ur.UserId == userId)
                .ToListAsync();

            var roleIds = userRoles.Select(ur => ur.RoleId).ToList();

            var roleMenus = await _roleMenuRepository.AsQueryable()
                .Where(rm => roleIds.Contains(rm.RoleId))
                .ToListAsync();

            var menuIds = roleMenus.Select(rm => rm.MenuId).Distinct().ToList();

            var menus = await Repository.AsQueryable()
                .Where(m => menuIds.Contains(m.Id))
                .OrderBy(m => m.Sort)
                .ToListAsync();

            return BuildTree(menus.Select(MapToDto).ToList());
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "获取用户菜单树异常");
            throw;
        }
    }

    /// <inheritdoc/>
    public async Task<bool> ChangeStatusAsync(long menuId, LeanEnabledStatus status)
    {
        try
        {
            var menu = await Repository.GetByIdAsync(menuId);
            if (menu == null)
            {
                throw new Exception($"菜单不存在：{menuId}");
            }

            menu.Status = status;

            return await Repository.UpdateAsync(menu);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "修改菜单状态异常");
            throw;
        }
    }

    /// <inheritdoc/>
    public async Task<(int Success, int Fail)> ImportAsync(List<LeanMenuImportDto> importDtos)
    {
        try
        {
            var success = 0;
            var fail = 0;

            foreach (var importDto in importDtos)
            {
                try
                {
                    // 检查菜单编码是否已存在
                    var existMenu = await Repository.AsQueryable()
                        .Where(m => m.Code == importDto.Code)
                        .FirstAsync();

                    if (existMenu != null)
                    {
                        fail++;
                        continue;
                    }

                    // 获取父级ID
                    long? parentId = null;
                    if (!string.IsNullOrEmpty(importDto.ParentName))
                    {
                        var parent = await Repository.AsQueryable()
                            .Where(m => m.Name == importDto.ParentName)
                            .FirstAsync();
                        if (parent != null)
                        {
                            parentId = parent.Id;
                        }
                    }

                    // 创建菜单
                    var menu = new LeanMenu
                    {
                        ParentId = parentId,
                        Name = importDto.Name,
                        Code = importDto.Code,
                        Type = importDto.Type,
                        Path = importDto.Path,
                        Component = importDto.Component,
                        Permission = importDto.Permission,
                        Icon = importDto.Icon,
                        Sort = importDto.Sort,
                        Status = importDto.Status,
                        IsExternal = importDto.IsExternal,
                        IsCache = importDto.IsCache,
                        IsVisible = importDto.IsVisible
                    };

                    var result = await Repository.InsertAsync(menu);
                    if (result)
                    {
                        success++;
                    }
                    else
                    {
                        fail++;
                    }
                }
                catch
                {
                    fail++;
                }
            }

            return (success, fail);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "导入菜单数据异常");
            throw;
        }
    }

    /// <inheritdoc/>
    public async Task<List<LeanMenuExportDto>> ExportAsync(LeanMenuQueryDto queryDto)
    {
        try
        {
            var query = Repository.AsQueryable()
                .WhereIF(!string.IsNullOrEmpty(queryDto.Name), m => m.Name.Contains(queryDto.Name!))
                .WhereIF(!string.IsNullOrEmpty(queryDto.Code), m => m.Code.Contains(queryDto.Code!))
                .WhereIF(queryDto.Type.HasValue, m => m.Type == queryDto.Type)
                .WhereIF(queryDto.Status.HasValue, m => m.Status == queryDto.Status)
                .OrderBy(m => m.Sort);

            var menus = await query.ToListAsync();
            var dtos = new List<LeanMenuExportDto>();

            foreach (var menu in menus)
            {
                var dto = new LeanMenuExportDto
                {
                    Name = menu.Name,
                    Code = menu.Code,
                    TypeName = menu.Type.ToString(),
                    Path = menu.Path,
                    Component = menu.Component,
                    Permission = menu.Permission,
                    Icon = menu.Icon,
                    Sort = menu.Sort,
                    StatusName = menu.Status.ToString(),
                    IsExternal = menu.IsExternal,
                    IsCache = menu.IsCache,
                    IsVisible = menu.IsVisible
                };

                if (menu.ParentId.HasValue)
                {
                    var parent = await Repository.GetByIdAsync(menu.ParentId.Value);
                    if (parent != null)
                    {
                        dto.ParentName = parent.Name;
                    }
                }

                dtos.Add(dto);
            }

            return dtos;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "导出菜单数据异常");
            throw;
        }
    }

    /// <inheritdoc/>
    public Task<LeanMenuImportTemplateDto> GetImportTemplateAsync()
    {
        return Task.FromResult(new LeanMenuImportTemplateDto());
    }

    /// <summary>
    /// 构建菜单树
    /// </summary>
    /// <param name="menus">菜单列表</param>
    /// <returns>菜单树</returns>
    private List<LeanMenuDto> BuildTree(List<LeanMenuDto> menus)
    {
        var tree = new List<LeanMenuDto>();
        var lookup = menus.ToLookup(m => m.ParentId);

        foreach (var menu in menus.Where(m => !m.ParentId.HasValue))
        {
            tree.Add(menu);
            BuildTreeRecursive(menu, lookup);
        }

        return tree;
    }

    /// <summary>
    /// 递归构建菜单树
    /// </summary>
    /// <param name="parent">父级菜单</param>
    /// <param name="lookup">菜单查找表</param>
    private void BuildTreeRecursive(LeanMenuDto parent, ILookup<long?, LeanMenuDto> lookup)
    {
        var children = lookup[parent.Id];
        foreach (var child in children)
        {
            parent.Children.Add(child);
            BuildTreeRecursive(child, lookup);
        }
    }

    /// <summary>
    /// 将实体映射为DTO
    /// </summary>
    /// <param name="entity">实体</param>
    /// <returns>DTO</returns>
    protected override LeanMenuDto MapToDto(LeanMenu entity)
    {
        return new LeanMenuDto
        {
            Id = entity.Id,
            ParentId = entity.ParentId,
            Name = entity.Name,
            Code = entity.Code,
            Type = entity.Type,
            Path = entity.Path,
            Component = entity.Component,
            Permission = entity.Permission,
            Icon = entity.Icon,
            Sort = entity.Sort,
            Status = entity.Status,
            IsExternal = entity.IsExternal,
            IsCache = entity.IsCache,
            IsVisible = entity.IsVisible
        };
    }

    /// <summary>
    /// 将DTO映射为实体
    /// </summary>
    /// <param name="dto">DTO</param>
    /// <returns>实体</returns>
    protected override LeanMenu MapToEntity(LeanMenuCreateDto dto)
    {
        return new LeanMenu
        {
            ParentId = dto.ParentId,
            Name = dto.Name,
            Code = dto.Code,
            Type = dto.Type,
            Path = dto.Path,
            Component = dto.Component,
            Permission = dto.Permission,
            Icon = dto.Icon,
            Sort = dto.Sort,
            Status = dto.Status,
            IsExternal = dto.IsExternal,
            IsCache = dto.IsCache,
            IsVisible = dto.IsVisible
        };
    }

    /// <summary>
    /// 将DTO映射为实体
    /// </summary>
    /// <param name="dto">DTO</param>
    /// <param name="entity">实体</param>
    protected override void MapToEntity(LeanMenuUpdateDto dto, LeanMenu entity)
    {
        entity.ParentId = dto.ParentId;
        entity.Name = dto.Name;
        entity.Code = dto.Code;
        entity.Type = dto.Type;
        entity.Path = dto.Path;
        entity.Component = dto.Component;
        entity.Permission = dto.Permission;
        entity.Icon = dto.Icon;
        entity.Sort = dto.Sort;
        entity.Status = dto.Status;
        entity.IsExternal = dto.IsExternal;
        entity.IsCache = dto.IsCache;
        entity.IsVisible = dto.IsVisible;
    }

    /// <summary>
    /// 获取主键
    /// </summary>
    /// <param name="dto">DTO</param>
    /// <returns>主键</returns>
    protected override long GetId(LeanMenuUpdateDto dto)
    {
        return dto.Id;
    }
} 