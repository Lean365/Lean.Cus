//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件的所有修改。
// </auto-generated>
//
// <copyright file="LeanDevicesExtendService.cs" company="Lean365">
//     Copyright (c) Lean365. All rights reserved.
// </copyright>
// <author>Lean365</author>
// <date>2024-01-13</date>
// <summary>
// 设备扩展信息服务实现
// </summary>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Lean.Cus.Application.Dtos.Admin;
using Lean.Cus.Application.Interfaces.Admin;
using Lean.Cus.Common.Paging;
using Lean.Cus.Common.Enums;
using Lean.Cus.Domain.Entities.Admin;
using Lean.Cus.Domain.IRepositories;
using Mapster;
using SqlSugar;
using Lean.Cus.Common.Excel;

namespace Lean.Cus.Application.Services.Admin;

/// <summary>
/// 设备扩展信息服务实现
/// </summary>
public class LeanDevicesExtendService : ILeanDevicesExtendService
{
    private readonly ILeanRepository<LeanDevicesExtend> _devicesExtendRepository;

    /// <summary>
    /// 初始化设备扩展信息服务
    /// </summary>
    public LeanDevicesExtendService(ILeanRepository<LeanDevicesExtend> devicesExtendRepository)
    {
        _devicesExtendRepository = devicesExtendRepository;
    }

    /// <summary>
    /// 获取设备扩展信息
    /// </summary>
    public async Task<LeanDevicesExtendDto> GetAsync(string deviceId)
    {
        var entity = await _devicesExtendRepository.GetFirstAsync(x => x.DeviceId == deviceId);
        return entity?.Adapt<LeanDevicesExtendDto>();
    }

    /// <summary>
    /// 获取用户的设备列表
    /// </summary>
    public async Task<List<LeanDevicesExtendDto>> GetListByUserIdAsync(long userId)
    {
        var list = await _devicesExtendRepository.GetListAsync(x => x.UserId == userId);
        return list.Adapt<List<LeanDevicesExtendDto>>();
    }

    /// <summary>
    /// 分页查询设备扩展信息
    /// </summary>
    public async Task<PagedResults<LeanDevicesExtendDto>> GetPagedListAsync(LeanDevicesExtendQueryDto query)
    {
        var expression = Expressionable.Create<LeanDevicesExtend>();

        expression.AndIF(!string.IsNullOrEmpty(query.DeviceId), x => x.DeviceId.Contains(query.DeviceId));
        expression.AndIF(!string.IsNullOrEmpty(query.DeviceName), x => x.DeviceName.Contains(query.DeviceName));
        expression.AndIF(query.DeviceType.HasValue, x => x.DeviceType == query.DeviceType.Value);
        expression.AndIF(!string.IsNullOrEmpty(query.IpAddress), x => x.IpAddress.Contains(query.IpAddress));
        expression.AndIF(query.OnlineStatus.HasValue, x => x.OnlineStatus == query.OnlineStatus.Value);
        expression.AndIF(query.UserId.HasValue, x => x.UserId == query.UserId.Value);
        expression.AndIF(query.LastOnlineTimeStart.HasValue, x => x.LastOnlineTime >= query.LastOnlineTimeStart.Value);
        expression.AndIF(query.LastOnlineTimeEnd.HasValue, x => x.LastOnlineTime <= query.LastOnlineTimeEnd.Value);

        var list = await _devicesExtendRepository.GetPagedListAsync(expression.ToExpression(), query);
        return list.Adapt<PagedResults<LeanDevicesExtendDto>>();
    }

    /// <summary>
    /// 更新设备登录信息
    /// </summary>
    public async Task UpdateLoginInfoAsync(LeanDevicesExtendLoginUpdateDto input)
    {
        var entity = await _devicesExtendRepository.GetFirstAsync(x => x.DeviceId == input.DeviceId);
        if (entity == null)
        {
            entity = input.Adapt<LeanDevicesExtend>();
            entity.LastOnlineTime = DateTime.Now;
            entity.OnlineStatus = LeanOnlineStatus.Online;
            await _devicesExtendRepository.InsertAsync(entity);
        }
        else
        {
            entity.DeviceName = input.DeviceName;
            entity.DeviceType = input.DeviceType;
            entity.OperatingSystem = input.OperatingSystem;
            entity.Browser = input.Browser;
            entity.IpAddress = input.IpAddress;
            entity.Location = input.Location;
            entity.LastOnlineTime = DateTime.Now;
            entity.OnlineStatus = LeanOnlineStatus.Online;
            entity.UserId = input.UserId;
            await _devicesExtendRepository.UpdateAsync(entity);
        }
    }

    /// <summary>
    /// 更新设备登出信息
    /// </summary>
    public async Task UpdateLogoutInfoAsync(LeanDevicesExtendLogoutUpdateDto input)
    {
        var entity = await _devicesExtendRepository.GetFirstAsync(x => x.DeviceId == input.DeviceId);
        if (entity != null)
        {
            entity.IpAddress = input.IpAddress;
            entity.LastOnlineTime = DateTime.Now;
            entity.OnlineStatus = LeanOnlineStatus.Offline;
            await _devicesExtendRepository.UpdateAsync(entity);
        }
    }

    /// <summary>
    /// 更新设备在线状态
    /// </summary>
    public async Task UpdateOnlineStatusAsync(string deviceId, LeanOnlineStatus status)
    {
        var entity = await _devicesExtendRepository.GetFirstAsync(x => x.DeviceId == deviceId);
        if (entity != null)
        {
            entity.OnlineStatus = status;
            if (status == LeanOnlineStatus.Online)
            {
                entity.LastOnlineTime = DateTime.Now;
            }
            await _devicesExtendRepository.UpdateAsync(entity);
        }
    }

    /// <summary>
    /// 导出设备扩展信息
    /// </summary>
    public async Task<byte[]> ExportAsync(LeanDevicesExtendQueryDto query)
    {
        var list = await _devicesExtendRepository.GetListAsync(x =>
            (string.IsNullOrEmpty(query.DeviceId) || x.DeviceId.Contains(query.DeviceId)) &&
            (string.IsNullOrEmpty(query.DeviceName) || x.DeviceName.Contains(query.DeviceName)) &&
            (!query.DeviceType.HasValue || x.DeviceType == query.DeviceType.Value) &&
            (string.IsNullOrEmpty(query.IpAddress) || x.IpAddress.Contains(query.IpAddress)) &&
            (!query.OnlineStatus.HasValue || x.OnlineStatus == query.OnlineStatus.Value) &&
            (!query.UserId.HasValue || x.UserId == query.UserId.Value) &&
            (!query.LastOnlineTimeStart.HasValue || x.LastOnlineTime >= query.LastOnlineTimeStart.Value) &&
            (!query.LastOnlineTimeEnd.HasValue || x.LastOnlineTime <= query.LastOnlineTimeEnd.Value));

        var exportList = list.Adapt<List<LeanDevicesExtendExportDto>>();
        return await LeanExcelHelper.ExportAsync(exportList, "设备扩展信息");
    }
} 