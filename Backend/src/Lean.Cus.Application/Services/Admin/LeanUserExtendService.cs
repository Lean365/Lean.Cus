//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件的所有修改。
// </auto-generated>
//
// <copyright file="LeanUserExtendService.cs" company="Lean365">
//     Copyright (c) Lean365. All rights reserved.
// </copyright>
// <author>Lean365</author>
// <date>2024-01-13</date>
// <summary>
// 用户扩展信息服务实现
// </summary>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Lean.Cus.Application.Dtos.Admin;
using Lean.Cus.Application.Interfaces.Admin;
using Lean.Cus.Common.Paging;
using Lean.Cus.Domain.Entities.Admin;
using Lean.Cus.Domain.IRepositories;
using Mapster;
using SqlSugar;
using Lean.Cus.Common.Excel;

namespace Lean.Cus.Application.Services.Admin;

/// <summary>
/// 用户扩展信息服务实现
/// </summary>
public class LeanUserExtendService : ILeanUserExtendService
{
    private readonly ILeanRepository<LeanUserExtend> _userExtendRepository;

    /// <summary>
    /// 初始化用户扩展信息服务
    /// </summary>
    public LeanUserExtendService(ILeanRepository<LeanUserExtend> userExtendRepository)
    {
        _userExtendRepository = userExtendRepository;
    }

    /// <summary>
    /// 获取用户扩展信息
    /// </summary>
    public async Task<LeanUserExtendDto> GetAsync(long userId)
    {
        var entity = await _userExtendRepository.GetFirstAsync(x => x.UserId == userId);
        return entity?.Adapt<LeanUserExtendDto>();
    }

    /// <summary>
    /// 分页查询用户扩展信息
    /// </summary>
    public async Task<PagedResults<LeanUserExtendDto>> GetPagedListAsync(LeanUserExtendQueryDto query)
    {
        var expression = Expressionable.Create<LeanUserExtend>();

        expression.AndIF(query.UserId.HasValue, x => x.UserId == query.UserId.Value);
        expression.AndIF(!string.IsNullOrEmpty(query.LoginIp), x => x.LastLoginIp.Contains(query.LoginIp));
        expression.AndIF(!string.IsNullOrEmpty(query.LoginDevice), x => x.LastLoginDevice.Contains(query.LoginDevice));
        expression.AndIF(!string.IsNullOrEmpty(query.LoginLocation), x => x.LastLoginLocation.Contains(query.LoginLocation));
        expression.AndIF(!string.IsNullOrEmpty(query.LoginBrowser), x => x.LastLoginBrowser.Contains(query.LoginBrowser));
        expression.AndIF(!string.IsNullOrEmpty(query.LoginOs), x => x.LastLoginOs.Contains(query.LoginOs));
        expression.AndIF(query.LastLoginTimeStart.HasValue, x => x.LastLoginTime >= query.LastLoginTimeStart.Value);
        expression.AndIF(query.LastLoginTimeEnd.HasValue, x => x.LastLoginTime <= query.LastLoginTimeEnd.Value);
        expression.AndIF(query.LastLogoutTimeStart.HasValue, x => x.LastLogoutTime >= query.LastLogoutTimeStart.Value);
        expression.AndIF(query.LastLogoutTimeEnd.HasValue, x => x.LastLogoutTime <= query.LastLogoutTimeEnd.Value);
        expression.AndIF(query.IsLocked.HasValue, x => x.LockoutEndTime != null && x.LockoutEndTime > DateTime.Now);

        var list = await _userExtendRepository.GetPagedListAsync(expression.ToExpression(), query);
        return list.Adapt<PagedResults<LeanUserExtendDto>>();
    }

    /// <summary>
    /// 更新用户登录信息
    /// </summary>
    public async Task UpdateLoginInfoAsync(LeanUserExtendLoginUpdateDto input)
    {
        var entity = await _userExtendRepository.GetFirstAsync(x => x.UserId == input.UserId);
        if (entity == null)
        {
            entity = new LeanUserExtend
            {
                UserId = input.UserId,
                FirstLoginTime = DateTime.Now,
                FirstLoginIp = input.IpAddress,
                FirstLoginDevice = input.Device,
                FirstLoginLocation = input.Location,
                FirstLoginBrowser = input.Browser,
                FirstLoginOs = input.Os,
                LastLoginTime = DateTime.Now,
                LastLoginIp = input.IpAddress,
                LastLoginDevice = input.Device,
                LastLoginLocation = input.Location,
                LastLoginBrowser = input.Browser,
                LastLoginOs = input.Os,
                LoginCount = 1
            };
            await _userExtendRepository.InsertAsync(entity);
        }
        else
        {
            entity.LastLoginTime = DateTime.Now;
            entity.LastLoginIp = input.IpAddress;
            entity.LastLoginDevice = input.Device;
            entity.LastLoginLocation = input.Location;
            entity.LastLoginBrowser = input.Browser;
            entity.LastLoginOs = input.Os;
            entity.LoginCount++;
            await _userExtendRepository.UpdateAsync(entity);
        }
    }

    /// <summary>
    /// 更新用户登出信息
    /// </summary>
    public async Task UpdateLogoutInfoAsync(LeanUserExtendLogoutUpdateDto input)
    {
        var entity = await _userExtendRepository.GetFirstAsync(x => x.UserId == input.UserId);
        if (entity != null)
        {
            entity.LastLogoutTime = DateTime.Now;
            entity.LastLogoutIp = input.IpAddress;
            entity.LastLogoutType = input.LogoutType;
            await _userExtendRepository.UpdateAsync(entity);
        }
    }

    /// <summary>
    /// 更新用户密码错误信息
    /// </summary>
    public async Task UpdatePasswordErrorInfoAsync(LeanUserExtendPasswordErrorUpdateDto input)
    {
        var entity = await _userExtendRepository.GetFirstAsync(x => x.UserId == input.UserId);
        if (entity != null)
        {
            entity.PasswordErrorCount++;
            entity.LastPasswordErrorTime = DateTime.Now;
            entity.LockoutEndTime = input.LockoutEndTime;
            await _userExtendRepository.UpdateAsync(entity);
        }
    }

    /// <summary>
    /// 导出用户扩展信息
    /// </summary>
    public async Task<byte[]> ExportAsync(LeanUserExtendQueryDto query)
    {
        var expression = Expressionable.Create<LeanUserExtend>();

        expression.AndIF(query.UserId.HasValue, x => x.UserId == query.UserId.Value);
        expression.AndIF(!string.IsNullOrEmpty(query.LoginIp), x => x.LastLoginIp.Contains(query.LoginIp));
        expression.AndIF(!string.IsNullOrEmpty(query.LoginDevice), x => x.LastLoginDevice.Contains(query.LoginDevice));
        expression.AndIF(!string.IsNullOrEmpty(query.LoginLocation), x => x.LastLoginLocation.Contains(query.LoginLocation));
        expression.AndIF(!string.IsNullOrEmpty(query.LoginBrowser), x => x.LastLoginBrowser.Contains(query.LoginBrowser));
        expression.AndIF(!string.IsNullOrEmpty(query.LoginOs), x => x.LastLoginOs.Contains(query.LoginOs));
        expression.AndIF(query.LastLoginTimeStart.HasValue, x => x.LastLoginTime >= query.LastLoginTimeStart.Value);
        expression.AndIF(query.LastLoginTimeEnd.HasValue, x => x.LastLoginTime <= query.LastLoginTimeEnd.Value);
        expression.AndIF(query.LastLogoutTimeStart.HasValue, x => x.LastLogoutTime >= query.LastLogoutTimeStart.Value);
        expression.AndIF(query.LastLogoutTimeEnd.HasValue, x => x.LastLogoutTime <= query.LastLogoutTimeEnd.Value);
        expression.AndIF(query.IsLocked.HasValue, x => x.LockoutEndTime != null && x.LockoutEndTime > DateTime.Now);

        var list = await _userExtendRepository.GetListAsync(expression.ToExpression());
        var exportList = list.Adapt<List<LeanUserExtendExportDto>>();
        return await LeanExcelHelper.ExportAsync(exportList, "用户扩展信息");
    }
} 